<?php

/**
 * @file
 * Provides main module functions.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\workbench_email\Entity\Template;
use Drupal\workbench_email\TemplateInterface;
use Drupal\workbench_moderation\ModerationStateTransitionInterface;

/**
 * Implements hook_help().
 */
function workbench_email_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.workbench_email_template.collection':
    case 'help.page.workbench_email':
      return '<p>' . t("The Workbench Moderation Email module keeps track of when a piece of entity transitions from one state to another. Admins can create new templates to manage the contents and recipients of email sent when those transitions happen.") . '</p><p>Each template can be attached to a transition by editing the transition and selecting the templates to use.</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for moderation_state_transition_edit_form.
 */
function workbench_email_form_moderation_state_transition_edit_form_alter(&$form, FormStateInterface $form_state) {
  // Alter the transition form to add the fields to choose the templates.
  /** @var ModerationStateTransitionInterface $transition */

  $form_object = $form_state->getFormObject();
  if (!in_array($form_object->getOperation(), ['edit', 'add'], TRUE)) {
    // Only alter the edit and add forms.
    return;
  }
  $transition = $form_object->getEntity();

  // Add the template selection field.
  $template_options = array_map(function (TemplateInterface $template) {
    return $template->label();
  }, Template::loadMultiple());
  $form['workbench_email_templates'] = [
    '#type' => 'checkboxes',
    '#title' => t('Email Templates'),
    '#description' => t('Use the following mail templates'),
    '#options' => $template_options,
    '#default_value' => $transition->getThirdPartySetting('workbench_email', 'workbench_email_templates', []),
    '#access' => $template_options,
  ];

  // And add an entity builder.
  $form['#entity_builders'][] = 'workbench_email_transition_edit_builder';
}

/**
 * Entity builder for the transition form edit form with third party options.
 *
 * @see workbench_email_form_moderation_state_transition_edit_form_alter()
 */
function workbench_email_transition_edit_builder($entity_type, ModerationStateTransitionInterface $transition, &$form, FormStateInterface $form_state) {
  $transition->setThirdPartySetting('workbench_email', 'workbench_email_templates', array_filter($form_state->getValue('workbench_email_templates')));
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function workbench_email_moderation_state_transition_presave(ModerationStateTransitionInterface $transition) {
  if (!$transition->isSyncing()) {
    $dependencies = $transition->get('dependencies');
    foreach ($transition->getThirdPartySetting('workbench_email', 'workbench_email_templates', []) as $template) {
      $dependencies['enforced']['config'][] = 'workbench_email.workbench_email_template.' . $template;
    }
    // Ensure no duplicates.
    $dependencies['enforced']['config'] = array_unique($dependencies['enforced']['config']);
    $transition->set('dependencies', $dependencies);
  }
}

/**
 * Implements hook_mail().
 */
function workbench_email_mail($key, &$message, $params) {
  if (strpos($key, 'template::') === 0) {
    // Mailing one of our templates.
    $message['subject'] = $params['subject'];
    if (\Drupal::moduleHandler()->moduleExists('swiftmailer')) {
      // If swiftmailer exists, we send in HTML.
      $message['headers']['Content-Type'] = 'text/html';
      $message['params']['convert'] = TRUE;
      $message['body'][] = $params['body'];
    }
    else {
      // Strip out any HTML.
      $message['body'][] = MailFormatHelper::htmlToText($params['body']);
    }
  }
}
